---
import type { MarkdownHeading } from 'astro';
import type { InferEntrySchema } from "astro:content";
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import Layout from './Layout.astro';
import { siteConfig } from "@config";
import Breadcrumb from '@components/common/Breadcrumb.astro';
import Link from '@components/common/Link.astro';
import Counter from "@components/common/Counter.astro";
import SeriesNav from '@components/post/SeriesNav.astro';
import PostTOC from '@components/post/PostTOC.astro';
import RelatedPosts from '@components/post/RelatedPosts.astro';
import SocialShare from '@components/post/SocialShare.astro';
import ReadingProgress from '@components/post/ReadingProgress.astro';
import ReactiveTOC from "@components/post/ReactiveTOC.astro";
import { formatDate, formatDatetimez } from "@utils/dateUtils";
import { keyToSlug } from '@utils/taxonomyUtils';

interface Props {
  postSlug: string;
  postData: InferEntrySchema<"posts">;
  postHeadings: MarkdownHeading[];
}

const { statistics } = siteConfig;
const { postSlug, postData, postHeadings } = Astro.props;
const {
  title, subtitle, description, createTime,
  image, authors, categories, tags, series,
  canonical, draft, readingCost, wordCount,
  publishTime, updateTime
} = postData;

// Get the canonical URL for this post
// Make sure we have a valid site URL to avoid the TypeError: Invalid URL error
const canonicalUrl = canonical || (
  Astro.site
  ? new URL(Astro.url.pathname, Astro.site).toString()
  : Astro.url.pathname
);


// Convert tags to slugs for URLs
const tagSlugs = tags ? await Promise.all(
  tags.map(async (tag: string) => ({
    original: tag,
    slug: await keyToSlug('tags', tag)
  }))
) : [];

// Convert categories to slugs for URLs
const categorySlugs = categories ? await Promise.all(
  categories.map(async (category: string) => ({
    original: category,
    slug: await keyToSlug('categories', category)
  }))
) : [];

// Convert authors to slugs for URLs
const authorSlugs = authors ? await Promise.all(
  authors.map(async (author: string) => ({
    original: author,
    slug: await keyToSlug('authors', author)
  }))
) : [];

// Generate breadcrumbs for structured data
const breadcrumbs = [
  { name: '首页', url: '/' },
  { name: '文章', url: '/posts' }
];
if (categorySlugs && categorySlugs.length > 0) {
  breadcrumbs.push({ name: categorySlugs[0].original, url: `/categories/${categorySlugs[0].slug}` });
}
breadcrumbs.push({ name: title, url: canonicalUrl });
---

<Layout
  title={title}
  description={description}
  image={image?.src || undefined}
  article={true}
  canonical={canonicalUrl}
  publishDate={publishTime}
  author={authors && authors.length > 0 ? { name: authors[0] } : undefined}
  tags={tags}
  categories={categories}
>

  <!-- Reading Progress Bar -->
  <ReadingProgress />
  <ReactiveTOC headings={postHeadings} />

  <article class="w-full py-8" style="transition: opacity 0.3s ease;">
    <!-- Breadcrumb Navigation -->
    <Breadcrumb items={breadcrumbs} className="mb-6" />
    
    <!-- Post Header -->
    <header class="mb-8">
      <div class="flex flex-wrap items-center text-gray-500 dark:text-gray-400 mb-4 gap-4">
        <!-- Publish Date -->
        {publishTime && (
          <div class="flex items-center" title={"发布时间：" + formatDatetimez(publishTime)}>
            <Icon name="mdi:calendar" class="w-5 h-5 mr-1" />
            <time datetime={publishTime.toISOString()}>
              {formatDate(publishTime)}
            </time>
          </div>
        )}

        <!-- Modified Date -->
        {updateTime && (
          <div class="flex items-center" title={"最后更新时间：" + formatDatetimez(updateTime)}>
            <Icon name="mdi:calendar-edit" class="w-5 h-5 mr-1" />
            <time datetime={updateTime.toISOString()}>
              {formatDate(updateTime)}
            </time>
          </div>
        )}

        <!-- Categories -->
        {categorySlugs && categorySlugs.length > 0 && (
          <div class="flex items-center">
            <Icon name="mdi:folder" class="w-5 h-5 mr-1" />
            <div class="flex flex-wrap gap-2">
              {categorySlugs.map((categoryInfo) => (
                <Link
                  href={`/categories/${categoryInfo.slug}`}
                  class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-300"
                >
                  {categoryInfo.original}
                </Link>
              ))}
            </div>
          </div>
        )}
        
        <!-- Author -->
        {authorSlugs && authorSlugs.length > 0 && (
          <div class="flex items-center">
            <Icon name="mdi:account" class="w-5 h-5 mr-1" />
            <div class="flex flex-wrap gap-2">
              {authorSlugs.map((authorInfo) => (
                <Link href={`/authors/${authorInfo.slug}`}
                  class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-300"
                >
                  {authorInfo.original}
                </Link>
              ))}
            </div>
          </div>
        )}

        <!-- 字数统计 -->
        {wordCount && (
          <div class="flex items-center" title="文章字数">
            <Icon name="mdi:text" class="w-5 h-5 mr-1" />
            <span>{wordCount} 字</span>
          </div>
        )}

        <!-- 阅读时间 -->
        {readingCost && (
          <div class="flex items-center" title="预计阅读时间">
            <Icon name="mdi:clock-outline" class="w-5 h-5 mr-1" />
            <span>{readingCost} 分钟</span>
          </div>
        )}

        <!-- Page Statistics -->
        {statistics.enabled && statistics.pageViewsEnabled && (
          <div class="flex items-center" title="页面浏览量">
            <Icon name="mdi:eye" class="w-5 h-5 mr-1" />
            <Counter type="page_pv"/>
          </div>
          )
        }
      </div>
      
      <!-- Title -->
      <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        {title}
      </h1>
      
      <!-- Description -->
      {description && (
        <p class="text-lg text-gray-700 dark:text-gray-300 mb-6">
          {description}
        </p>
      )}
      
      <!-- Featured Image -->
      {image && (
        <div class="rounded-lg overflow-hidden mb-8 aspect-video">
          <Image 
            src={image} 
            alt={title} 
            class="w-full h-full object-cover"
            width={1280}
            height={720}
          />
        </div>
      )}
      
      <!-- Tags -->
      {tagSlugs && tagSlugs.length > 0 && (
        <div class="flex flex-wrap gap-2 mb-6">
          {tagSlugs.map((tagInfo) => (
            <Link href={`/tags/${tagInfo.slug}`}
              class="px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full text-sm hover:bg-blue-100 dark:hover:bg-blue-900 transition-colors duration-300"
            >
              #{tagInfo.original}
            </Link>
          ))}
        </div>
      )}
    </header>
    
    <!-- Series Navigation (if part of a series) -->
    {series && Array.isArray(series) && series.length === 2 && (
      <SeriesNav 
        currentSlug={postSlug}
        seriesName={series[0]}
      />
    )}
    
    <!-- Table of Contents -->
    <div class="mb-8 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
      <PostTOC headings={postHeadings}/>
    </div>

    
    <!-- Post Content -->
    <div class="prose prose-lg dark:prose-invert prose-blue prose-headings:font-bold prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-img:rounded-lg w-full !max-w-none break-words min-h-[200px]">
      <slot />
    </div>
    
    <!-- Social Share Component -->
    <SocialShare
      title={title}
      description={description}
      url={canonicalUrl}
      platforms={['email', 'qrcode']}
    />
    
    <!-- Related Posts -->
    <RelatedPosts currentSlug={postSlug} currentPostData={postData} />
  </article>
</Layout>
