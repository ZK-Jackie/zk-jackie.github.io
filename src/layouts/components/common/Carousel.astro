---
// Carousel.astro

// 导入必要的接口和类型
import type { CollectionEntry } from 'astro:content';

// 定义组件属性类型
export interface Props {
    items: CollectionEntry<'covers'>[];
}

// 从属性中解构数据
const { items } = Astro.props;
---

<!-- 组件结构 -->
<div class="carousel-wrapper">
    <div class="carousel">
        <div class="carousel-inner">
            {items.map((item) => (
              <div
                class="carousel-item"
                style={`background-image: url('${item.data.image}')`}
              >
                  <div class="carousel-content">
                      <h3>{item.data.title}</h3>
                      <p>{item.data.description}</p>
                      {item.data?.link && <a href={item.data?.link} class="btn">了解更多</a>}
                  </div>
              </div>
            ))}
        </div>

        <div class="carousel-controls">
            <div class="progress-bars">
                {items.map((_, index) => (
                  <div class="progress-item" data-index={index}>
                      <div class="progress-fill"></div>
                  </div>
                ))}
            </div>

            <div class="control-buttons">
                <button class="control-btn prev-btn">❮</button>
                <button class="control-btn play-btn">❚❚</button>
                <button class="control-btn next-btn">❯</button>
            </div>
        </div>
    </div>
</div>

<!-- 组件样式 -->
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .carousel-wrapper {
        width: 100%;
        position: relative;
        box-shadow: 0 10px 30px -5px rgba(0, 0, 0, 0.15);
        border-radius: 12px;
        overflow: hidden;
    }

    .carousel {
        position: relative;
        overflow: hidden;
        border-radius: 12px;
        height: 450px;
    }

    .carousel-inner {
        display: flex;
        transition: transform 0.5s ease-in-out;
        height: 100%;
    }

    .carousel-item {
        min-width: 100%;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 30px;
        background-size: cover;
        background-position: center;
        color: white;
        position: relative;
    }

    .carousel-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(45deg, rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.3));
    }

    .carousel-content {
        position: relative;
        z-index: 1;
        max-width: 600px;
        text-align: center;
    }

    .carousel-content h3 {
        font-size: 32px;
        margin-bottom: 15px;
        color: #fff;
        font-weight: 600;
    }

    .carousel-content p {
        font-size: 18px;
        line-height: 1.6;
        color: #e0e0e0;
        margin-bottom: 25px;
    }

    .btn {
        display: inline-block;
        padding: 12px 28px;
        background: #1677ff;
        color: white;
        text-decoration: none;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
        font-size: 16px;
    }

    .btn:hover {
        background: #0052cc;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .carousel-controls {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        padding: 20px;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        align-items: center;
        z-index: 10;
        backdrop-filter: blur(4px);
    }

    .progress-bars {
        display: flex;
        justify-content: center;
        gap: 12px;
        margin-bottom: 18px;
        width: 80%;
        max-width: 500px;
    }

    .progress-item {
        flex: 1;
        height: 4px;
        background: rgba(255, 255, 255, 0.25);
        border-radius: 2px;
        cursor: pointer;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        width: 0;
        background: #1677ff;
        border-radius: 2px;
        transition: width 0.2s linear;
    }

    .control-buttons {
        display: flex;
        gap: 16px;
    }

    .control-btn {
        background: rgba(255, 255, 255, 0.15);
        color: white;
        border: none;
        width: 38px;
        height: 38px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 16px;
    }

    .control-btn:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
    }

    @media (max-width: 768px) {
        .carousel {
            height: 350px;
        }

        .carousel-content h3 {
            font-size: 24px;
        }

        .carousel-content p {
            font-size: 16px;
        }
    }
</style>

<!-- 客户端JavaScript -->
<script>
    // 获取DOM元素
    const carouselInner = document.querySelector('.carousel-inner');
    const progressItems = document.querySelectorAll('.progress-item');
    const progressFills = document.querySelectorAll('.progress-fill');
    const prevBtn = document.querySelector('.prev-btn');
    const nextBtn = document.querySelector('.next-btn');
    const playBtn = document.querySelector('.play-btn');

    let currentIndex = 0;
    let intervalId = null;
    let autoPlay = true;
    const totalSlides = progressItems.length;
    const slideDuration = 5000; // 每张幻灯片显示时间(ms)

    // 更新进度条
    function updateProgress(index) {
        // 重置所有进度条
        progressFills.forEach(fill => {
            fill.style.width = '0%';
            fill.style.transition = 'none';
        });

        // 更新当前进度条
        setTimeout(() => {
            progressFills[index].style.transition = `width ${slideDuration}ms linear`;
            progressFills[index].style.width = '100%';
        }, 20);
    }

    // 跳转到指定幻灯片
    function goToSlide(index) {
        if (index < 0) {
            currentIndex = totalSlides - 1;
        } else if (index >= totalSlides) {
            currentIndex = 0;
        } else {
            currentIndex = index;
        }

        // 更新轮播位置
        carouselInner.style.transform = `translateX(-${currentIndex * 100}%)`;
        // 更新进度条
        updateProgress(currentIndex);

        // 重置自动播放
        clearInterval(intervalId);
        if (autoPlay) {
            intervalId = setInterval(goToNextSlide, slideDuration);
        }
    }

    // 上一张幻灯片
    function goToPrevSlide() {
        goToSlide(currentIndex - 1);
    }

    // 下一张幻灯片
    function goToNextSlide() {
        goToSlide(currentIndex + 1);
    }

    // 暂停/播放切换
    function toggleAutoPlay() {
        autoPlay = !autoPlay;
        playBtn.textContent = autoPlay ? '❚❚' : '►';

        if (autoPlay) {
            // 重置当前进度条动画
            updateProgress(currentIndex);
            intervalId = setInterval(goToNextSlide, slideDuration);
        } else {
            clearInterval(intervalId);
            // 暂停当前进度条动画
            const computedStyle = getComputedStyle(progressFills[currentIndex]);
            const currentWidth = computedStyle.width;
            progressFills[currentIndex].style.width = currentWidth;
            progressFills[currentIndex].style.transition = 'none';
        }
    }

    // 初始化组件
    function initCarousel() {
        if (totalSlides > 0) {
            // 初始化自动播放
            updateProgress(currentIndex);
            intervalId = setInterval(goToNextSlide, slideDuration);

            // 添加事件监听器
            prevBtn?.addEventListener('click', goToPrevSlide);
            nextBtn?.addEventListener('click', goToNextSlide);
            playBtn?.addEventListener('click', toggleAutoPlay);

            // 进度条点击跳转
            progressItems.forEach((item, index) => {
                item.addEventListener('click', () => goToSlide(index));
            });
        }
    }

    // 在组件挂载后初始化
    document.addEventListener('DOMContentLoaded', initCarousel);
</script>