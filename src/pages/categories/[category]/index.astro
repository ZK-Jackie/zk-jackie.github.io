---
import type { CollectionEntry } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import PostCard from '@components/post/PostCard.astro';
import Pagination from '@components/common/Pagination.astro';
import { getTotalPages } from '@utils/pageUtils';
import { siteConfig } from '@config';
import { getTaxonomyLabel, getTaxonomyDescription } from '@utils/taxonomyUtils';
import { CollectionUtils, PostUtils, CategoryUtils } from "@utils/collectionUtils";
import { resolveUrl } from "@utils/pathUtils";


interface Props {
  categoryKey: string;
  posts: CollectionEntry<"posts">[];
}

interface Path {
  params: { category: string };
  props: Props;
}

export async function getStaticPaths(): Promise<Path[]> {
  // 获取所有标签及其对应的文章
  const sortedTagPostMapping: Map<string, CollectionEntry<"posts">[]> = await new CollectionUtils("posts")
    .filter(PostUtils.filterNotDraft)
    .sortBy(PostUtils.compareByDateDesc)
    .groupBelongTo(PostUtils.categories);

  // 将标签映射转换为包含标签名称、slug、文章列表和文章数量的数组
  const pageDataList: App.Tags.CategoryPageData[] = await CategoryUtils.getPageDataList(sortedTagPostMapping);

  // 为每个标签生成静态路径和属性
  return pageDataList.map(
    // using brackets to return `object` directly, otherwise it will be treated as a code block
    pageData => ({
      params: { category: pageData.slug },
      props: { categoryKey: pageData.name, categorySlug: pageData.slug, posts: pageData.posts, count: pageData.count }
    })
  );
}


const { content: contentConfig } = siteConfig;
const { categoryKey, posts } = Astro.props;
const currentLocale = Astro.locals.lang;
const paginationBasePath = resolveUrl('page', Astro.url.pathname)
const page2Url = resolveUrl('2', paginationBasePath)
const pageSize = contentConfig.postsPerPage;
const totalSize = posts.length;
const totalPages = getTotalPages(totalSize, contentConfig.postsPerPage)

// Get localized label and description
const categoryLabel = await getTaxonomyLabel('categories', categoryKey, currentLocale);
const categoryDescription = await getTaxonomyDescription('categories', categoryKey, currentLocale);

// Get posts for the first page
const paginatedPosts = posts.slice(0, pageSize);

// SEO meta data
const pageTitle = currentLocale === 'en' ? `Category: ${categoryLabel}` : `分类：${categoryLabel}`;
const pageDescription = categoryDescription || 
  (currentLocale === 'en' 
    ? `Browse all articles in ${categoryLabel} category` 
    : `浏览 ${categoryLabel} 分类下的所有文章`);
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  noindex={true}
>
  <div class="w-full py-8">
    <header class="mb-10">
      <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        {currentLocale === 'en' ? `Category: ${categoryLabel}` : `分类： ${categoryLabel}`}
      </h1>
      {categoryDescription && (
        <p class="text-lg text-gray-600 dark:text-gray-400 mb-4">
          {categoryDescription}
        </p>
      )}
      <p class="text-lg text-gray-700 dark:text-gray-300">
        {currentLocale === 'en' ? `${totalSize} articles` : `共 ${totalSize} 篇文章`}
      </p>
    </header>
    
    {totalSize > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {paginatedPosts.map((post) => (
          <PostCard post={post} />
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-600 dark:text-gray-400">
          {currentLocale === 'en' ? 'No posts found in this category.' : '没有找到相关文章。'}
        </p>
      </div>
    )}
    
    <Pagination
      currentPage={1}
      totalPages={totalPages}
      prevUrl={null}
      nextUrl={totalSize > pageSize ? page2Url : null}
      basePath={paginationBasePath}
    />
  </div>
</Layout>
