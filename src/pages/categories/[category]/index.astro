---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import PostCard from '@components/post/PostCard.astro';
import Pagination from '@components/common/Pagination.astro';
import { getPagination } from '@utils/pagination';
import { siteConfig } from '@config';
import { 
  keyToSlug, 
  getTaxonomyLabel,
  getTaxonomyDescription 
} from '@utils/taxonomyUtils';
import { getLocaleByUrl } from '@i18n/utils';
import { notDataDraft } from "@utils/collectionUtils";

const { seo: seoConfig } = siteConfig;

export async function getStaticPaths() {
  // 获取所有文章
  const posts = await getCollection('posts', notDataDraft);
  
  // 获取所有文章中实际使用的分类，并统计每个分类的文章数量
  const categoryPostsMap = new Map<string, any[]>();
  
  // 遍历所有文章，收集分类和对应的文章
  posts.forEach(post => {
    if (post.data.categories && post.data.categories.length > 0) {
      post.data.categories.forEach(category => {
        if (!categoryPostsMap.has(category)) {
          categoryPostsMap.set(category, []);
        }
        categoryPostsMap.get(category)!.push(post);
      });
    }
  });
  
  // 只为有文章的分类生成静态路径
  const paths = await Promise.all(
    Array.from(categoryPostsMap.entries()).map(async ([categoryKey, categoryPosts]) => {
      // 为分类生成对应的 slug
      const categorySlug = await keyToSlug('categories', categoryKey);
      
      // 按发布时间排序文章
      const sortedPosts = categoryPosts.sort((a, b) => {
        if (!a.data.publishTime) return 1;
        if (!b.data.publishTime) return -1;
        return b.data.publishTime.getTime() - a.data.publishTime.getTime();
      });
      
      return {
        params: { category: categorySlug },
        props: { 
          categoryKey,
          categorySlug,
          posts: sortedPosts,
          count: sortedPosts.length
        }
      };
    })
  );
  
  return paths;
}

const { categoryKey, categorySlug, posts, count } = Astro.props;

// Get current locale
const currentLocale = getLocaleByUrl(Astro.url);

// Get localized label and description
const categoryLabel = await getTaxonomyLabel('categories', categoryKey, currentLocale);
const categoryDescription = await getTaxonomyDescription('categories', categoryKey, currentLocale);

const basePath = `/categories/${categorySlug}`;

// Get pagination data for first page
const { postsPerPage } = getPagination({ 
  page: 1, 
  totalPosts: count, 
  basePath 
});

// Get posts for the first page
const paginatedPosts = posts.slice(0, postsPerPage);

// Set noindex based on site config
const noindex = seoConfig.noindex.includes("/categories") || seoConfig.noindex.includes("*");

// SEO meta data
const pageTitle = currentLocale === 'en' ? `Category: ${categoryLabel}` : `分类：${categoryLabel}`;
const pageDescription = categoryDescription || 
  (currentLocale === 'en' 
    ? `Browse all articles in ${categoryLabel} category` 
    : `浏览 ${categoryLabel} 分类下的所有文章`);
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  noindex={noindex}
>
  <div class="w-full py-8">
    <header class="mb-10">
      <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        {currentLocale === 'en' ? `Category: ${categoryLabel}` : `分类： ${categoryLabel}`}
      </h1>
      {categoryDescription && (
        <p class="text-lg text-gray-600 dark:text-gray-400 mb-4">
          {categoryDescription}
        </p>
      )}
      <p class="text-lg text-gray-700 dark:text-gray-300">
        {currentLocale === 'en' ? `${count} articles` : `共 ${count} 篇文章`}
      </p>
    </header>
    
    {count > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {paginatedPosts.map((post) => (
          <PostCard post={post} />
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-600 dark:text-gray-400">
          {currentLocale === 'en' ? 'No posts found in this category.' : '没有找到相关文章。'}
        </p>
      </div>
    )}
    
    <Pagination
      currentPage={1}
      totalPages={Math.ceil(count / postsPerPage)}
      prevUrl={null}
      nextUrl={count > postsPerPage ? `${basePath}/page/2/` : null}
      basePath={basePath}
    />
  </div>
</Layout>
