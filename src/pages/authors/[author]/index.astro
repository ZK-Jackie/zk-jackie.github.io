---
import type { CollectionEntry } from 'astro:content';
import { Icon } from 'astro-icon/components';
import Layout from '@layouts/Layout.astro';
import PostCard from '@components/post/PostCard.astro';
import Pagination from '@components/common/Pagination.astro';
import { getTotalPages } from '@utils/pageUtils';
import { siteConfig } from '@config';
import { getTaxonomyLabel, getTaxonomyDescription } from '@utils/taxonomyUtils';
import { AuthorUtils, CollectionUtils, PostUtils } from "@utils/collectionUtils";
import { resolveUrl } from "@utils/pathUtils";


interface Props {
  authorKey: string;
  authorDetail: CollectionEntry<"authors"> | null;
  posts: CollectionEntry<"posts">[];
}

interface Path {
  params: { author: string };
  props: Props;
}


export async function getStaticPaths(): Promise<Path[]> {
  // 获取所有标签及其对应的文章
  const sortedAuthorPostMapping: Map<string, CollectionEntry<"posts">[]> = await new CollectionUtils("posts")
    .filter(PostUtils.filterNotDraft)
    .sortBy(PostUtils.compareByDateDesc)
    .groupBelongTo(PostUtils.authors);
  // 获取所有作者详情，过滤掉草稿
  const authorDetails = await new CollectionUtils("authors")
    .filter(AuthorUtils.filterNotDraft)
    .all();
  // 获取页面数据列表，转换为包含作者名称、slug、详情、文章列表和文章数量的数组后返回
  const pageDataList = await AuthorUtils.getPageDataList(sortedAuthorPostMapping, authorDetails)
  return pageDataList.map(pageData => ({
    params: { author: pageData.slug },
    props: {
      authorKey: pageData.name,
      authorDetail: pageData.detail || null,
      posts: pageData.posts
    }
  }));
}


const { content: contentConfig } = siteConfig;
const { authorKey, authorDetail, posts } = Astro.props;
const currentLocale = Astro.locals.lang;
const paginationBasePath = resolveUrl('page', Astro.url.pathname)
const page2Url = resolveUrl('2', paginationBasePath)
const pageSize = contentConfig.postsPerPage;
const totalSize = posts.length;
const totalPages = getTotalPages(totalSize, pageSize);

// Get localized label and description
const authorLabel = await getTaxonomyLabel('authors', authorKey, currentLocale);
const authorDescription = await getTaxonomyDescription('authors', authorKey, currentLocale);

// Get posts for the first page
const paginatedPosts = posts.slice(0, pageSize);

// SEO meta data
const pageTitle = currentLocale === 'en' ? `Author: ${authorLabel}` : `作者：${authorLabel}`;
const pageDescription = authorDescription || 
  (currentLocale === 'en' 
    ? `Browse all articles by ${authorLabel}` 
    : `浏览 ${authorLabel} 撰写的所有文章`);
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  noindex={true}
>
  <div class="w-full py-8">
    <header class="mb-10">
      <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4">
        {currentLocale === 'en' ? `Author: ${authorLabel}` : `作者：${authorLabel}`}
      </h1>
      {authorDescription && (
        <p class="text-lg text-gray-600 dark:text-gray-400 mb-4">
          {authorDescription}
        </p>
      )}
      <p class="text-lg text-gray-700 dark:text-gray-300">
        {currentLocale === 'en' ? `${totalSize} articles` : `共 ${totalSize} 篇文章`}
      </p>
    </header>
    
    {authorDetail && (
      <div class="mb-12 bg-white dark:bg-gray-800 rounded-xl shadow-md overflow-hidden border border-gray-100 dark:border-gray-700">
        <div class="p-6 md:p-8">
          <div class="flex flex-col md:flex-row gap-8">
            {authorDetail.data.image && (
              <div class="flex-shrink-0">
                <div class="w-32 h-32 md:w-40 md:h-40 rounded-full overflow-hidden border-4 border-white dark:border-gray-700 shadow-lg">
                  <img 
                    src={authorDetail.data.image}
                    alt={authorDetail.data.title}
                    class="w-full h-full object-cover"
                  />
                </div>
                
                {authorDetail.data.social && (
                  <div class="mt-4 flex justify-center gap-3">
                    {authorDetail.data.social.twitter && (
                      <a href={authorDetail.data.social.twitter} target="_blank" rel="noopener noreferrer"
                         class="text-gray-500 hover:text-blue-500 dark:text-gray-400 dark:hover:text-blue-400 transition-colors">
                        <Icon name="mdi:twitter" class="w-6 h-6" />
                      </a>
                    )}
                    {authorDetail.data.social.facebook && (
                      <a href={authorDetail.data.social.facebook} target="_blank" rel="noopener noreferrer"
                         class="text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 transition-colors">
                        <Icon name="mdi:facebook" class="w-6 h-6" />
                      </a>
                    )}
                    {authorDetail.data.social.instagram && (
                      <a href={authorDetail.data.social.instagram} target="_blank" rel="noopener noreferrer"
                         class="text-gray-500 hover:text-pink-600 dark:text-gray-400 dark:hover:text-pink-400 transition-colors">
                        <Icon name="mdi:instagram" class="w-6 h-6" />
                      </a>
                    )}
                  </div>
                )}
              </div>
            )}
            
            <div class="flex-grow">
              <div class="prose prose-lg dark:prose-invert max-w-none">
                <Fragment set:html={authorDetail.body} />
              </div>
            </div>
          </div>
        </div>
      </div>
    )}
    
    {totalSize > 0 ? (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {paginatedPosts.map((post) => (
          <PostCard post={post} />
        ))}
      </div>
    ) : (
      <div class="text-center py-12">
        <p class="text-gray-600 dark:text-gray-400">
          {currentLocale === 'en' ? 'No posts found by this author.' : '没有找到该作者的文章。'}
        </p>
      </div>
    )}
    
    <Pagination
      currentPage={1}
      totalPages={totalPages}
      prevUrl={null}
      nextUrl={totalSize > pageSize ? page2Url : null}
      basePath={paginationBasePath}
    />
  </div>
</Layout>
